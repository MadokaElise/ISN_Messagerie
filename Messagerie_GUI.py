from datetime import datetimefrom tkinter import *import socketfrom ModulesReseauAlpha import connexionimport threadingclass VueMessages(Frame):    # initialisation d'une VueMessage.    def __init__(self, command, master=NONE):        super().__init__(master)        self.command = command        self.pack()        # Creation zone pseudo        self.init_zone_pseudo()        # Creation zone texte pour les  messages        self.init_zone_texte()        # Creation zone message a envoyer        self.init_zone_message()        # Boutton quitter        quit_bouton = Button(master, text="Quitter", command=master.destroy, bg="gray75", fg="red3")        quit_bouton.pack(side="bottom")    def init_zone_texte(self):        frame_zone_text = LabelFrame(self, text="Messages", padx=5, pady=50)        self.zone_texte = Text(frame_zone_text, height=20, width=50, bg="ivory")        self.zone_texte.pack(padx=5, pady=5)        self.zone_texte.pack(side="left")        scroll_bar_text = Scrollbar(frame_zone_text, borderwidth=800)        scroll_bar_text.pack(side="right")        scroll_bar_text.config(command=self.zone_texte.yview)        self.zone_texte.config(yscrollcommand=scroll_bar_text.set)        frame_zone_text.pack()    def init_zone_message(self):        frame_zone_message = Label(self, padx=5, pady=5)        message_label = Label(frame_zone_message, text="Message :", bg="gray75")        message_label.pack(side="left")        self.message = Entry(frame_zone_message, width=50, bg="ivory")        self.message.pack(side="left")        frame_zone_message.pack()        envoyer_bouton = Button(frame_zone_message, text="Envoyer", command=self.envoyer_message, bg="light blue")        envoyer_bouton.pack(side="right")    def init_zone_pseudo(self):        frame_zone_pseudo = Label(self, padx=5, pady=5)        pseudo_label = Label(frame_zone_pseudo, text="Pseudo :", bg="gray75")        pseudo_label.pack(side="left")        self.pseudo = Entry(frame_zone_pseudo, width=50, bg="ivory")        self.pseudo.pack(side="left")        frame_zone_pseudo.pack()    def envoyer_message(self):        msg_text = self.message.get()        # Traitement du message : Ajout retour a la ligne        msg_text += "\n"        # Traitement du message : Ajout entete ( Pseudo+heure )        msg_text = "(" + datetime.today().strftime("%H:%M:%S") + ")" + self.pseudo.get() + " : " + msg_text        # Trace dans la console        # print("Envoyer : "+msg_text)        # Affiche notre message dans la zone de convsersation        self.recevoir_message(msg_text)        # reset de la zone de message        self.message.delete(0, END)        # Envoye du message : Declenchement de la commande        self.command(msg_text)    def recevoir_message(self, message_text):        self.zone_texte.insert('end', message_text)# Fin classe VueMessages# Exemple de commande pour la VueMessagedef test_command(txt):    print("Command Test : " + txt)# Commande 'Messagerie" pour la vueMessagedef messagerie_command(txt):    # envoyer le message au serveur :    connection.envoye_msg(txt)def connexion_recevoir():    recu = connection.recevoir_msg()    if recu != '' and recu != None:        #Si on a un message on l'affiche dans la vue message        app.recevoir_message(recu)    threading.Timer(2, connexion_recevoir).start()# Programme de testif __name__ == '__main__':    root = Tk()    root.title('Messagerie')    root.geometry('525x530')    app = VueMessages(messagerie_command, master=root)    # Exemple d'utilisation d'ajout message    app.recevoir_message("Bienvenue dans l'application Messagerie\n")    # Cr√©ation de la connexion :    connection = connexion('localHost', 11000)    #Lancement de la boucle d'ecoute    connexion_recevoir()    app.mainloop()